!function(t){function e(e){for(var a,r,c=e[0],o=e[1],h=e[2],m=0,u=[];m<c.length;m++)r=c[m],Object.prototype.hasOwnProperty.call(n,r)&&n[r]&&u.push(n[r][0]),n[r]=0;for(a in o)Object.prototype.hasOwnProperty.call(o,a)&&(t[a]=o[a]);for(l&&l(e);u.length;)u.shift()();return s.push.apply(s,h||[]),i()}function i(){for(var t,e=0;e<s.length;e++){for(var i=s[e],a=!0,c=1;c<i.length;c++){var o=i[c];0!==n[o]&&(a=!1)}a&&(s.splice(e--,1),t=r(r.s=i[0]))}return t}var a={},n={0:0},s=[];function r(e){if(a[e])return a[e].exports;var i=a[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=a,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)r.d(i,a,function(e){return t[e]}.bind(null,a));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="";var c=window.webpackJsonp=window.webpackJsonp||[],o=c.push.bind(c);c.push=e,c=c.slice();for(var h=0;h<c.length;h++)e(c[h]);var l=o;s.push([6,1]),i()}([,function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){},function(t,e,i){"use strict";i.r(e);i(1),i(2);function a(t){return null!=t?Promise.resolve(t):Promise.reject("is null")}i(3),i(4);class n{constructor(){this.decimalsign="\\.",this.setup_symbols(),this.sort_symbols()}setup_symbols(){this.greek_letters=["alpha","beta","gamma","Gamma","delta","Delta","epsilon","varepsilon","zeta","eta","theta","Theta","vartheta","iota","kappa","lambda","Lambda","mu","nu","xi","Xi","pi","Pi","rho","sigma","Sigma","tau","upsilon","phi","Phi","varphi","chi","psi","Psi","omega","Omega"],this.relations=[{asciimath:":=",tex:":="},{asciimath:"~",tex:"\\sim"},{asciimath:":|:",tex:"\\|"},{asciimath:"=>",tex:"\\Rightarrow"},{asciimath:"approx",tex:"\\approx"},{asciimath:"~~",tex:"\\approx"},{asciimath:"cong",tex:"\\cong"},{asciimath:"~=",tex:"\\cong"},{asciimath:"equiv",tex:"\\equiv"},{asciimath:"-=",tex:"\\equiv"},{asciimath:"exists",tex:"\\exists"},{asciimath:"EE",tex:"\\exists"},{asciimath:"forall",tex:"\\forall"},{asciimath:"AA",tex:"\\forall"},{asciimath:">=",tex:"\\ge"},{asciimath:"ge",tex:"\\ge"},{asciimath:"gt=",tex:"\\geq"},{asciimath:"geq",tex:"\\geq"},{asciimath:"gt",tex:"\\gt"},{asciimath:"in",tex:"\\in"},{asciimath:"<=",tex:"\\le"},{asciimath:"le",tex:"\\le"},{asciimath:"lt=",tex:"\\leq"},{asciimath:"leq",tex:"\\leq"},{asciimath:"lt",tex:"\\lt"},{asciimath:"models",tex:"\\models"},{asciimath:"|==",tex:"\\models"},{asciimath:"!=",tex:"\\ne"},{asciimath:"ne",tex:"\\ne"},{asciimath:"notin",tex:"\\notin"},{asciimath:"!in",tex:"\\notin"},{asciimath:"prec",tex:"\\prec"},{asciimath:"-lt",tex:"\\prec"},{asciimath:"-<",tex:"\\prec"},{asciimath:"preceq",tex:"\\preceq"},{asciimath:"-<=",tex:"\\preceq"},{asciimath:"propto",tex:"\\propto"},{asciimath:"prop",tex:"\\propto"},{asciimath:"subset",tex:"\\subset"},{asciimath:"sub",tex:"\\subset"},{asciimath:"subseteq",tex:"\\subseteq"},{asciimath:"sube",tex:"\\subseteq"},{asciimath:"succ",tex:"\\succ"},{asciimath:">-",tex:"\\succ"},{asciimath:"succeq",tex:"\\succeq"},{asciimath:">-=",tex:"\\succeq"},{asciimath:"supset",tex:"\\supset"},{asciimath:"sup",tex:"\\supset"},{asciimath:"supseteq",tex:"\\supseteq"},{asciimath:"supe",tex:"\\supseteq"},{asciimath:"vdash",tex:"\\vdash"},{asciimath:"|--",tex:"\\vdash"}],this.constants=[{asciimath:"dt",tex:"dt"},{asciimath:"dx",tex:"dx"},{asciimath:"dy",tex:"dy"},{asciimath:"dz",tex:"dz"},{asciimath:"prime",tex:"'"},{asciimath:"implies",tex:"\\implies"},{asciimath:"epsi",tex:"\\epsilon"},{asciimath:"leftrightarrow",tex:"\\leftrightarrow"},{asciimath:"Leftrightarrow",tex:"\\Leftrightarrow"},{asciimath:"rightarrow",tex:"\\rightarrow"},{asciimath:"Rightarrow",tex:"\\Rightarrow"},{asciimath:"backslash",tex:"\\backslash"},{asciimath:"leftarrow",tex:"\\leftarrow"},{asciimath:"Leftarrow",tex:"\\Leftarrow"},{asciimath:"setminus",tex:"\\setminus"},{asciimath:"bigwedge",tex:"\\bigwedge"},{asciimath:"diamond",tex:"\\diamond"},{asciimath:"bowtie",tex:"\\bowtie"},{asciimath:"bigvee",tex:"\\bigvee"},{asciimath:"bigcap",tex:"\\bigcap"},{asciimath:"bigcup",tex:"\\bigcup"},{asciimath:"square",tex:"\\square"},{asciimath:"lamda",tex:"\\lambda"},{asciimath:"Lamda",tex:"\\Lambda"},{asciimath:"aleph",tex:"\\aleph"},{asciimath:"angle",tex:"\\angle"},{asciimath:"frown",tex:"\\frown"},{asciimath:"qquad",tex:"\\qquad"},{asciimath:"cdots",tex:"\\cdots"},{asciimath:"vdots",tex:"\\vdots"},{asciimath:"ddots",tex:"\\ddots"},{asciimath:"cdot",tex:"\\cdot"},{asciimath:"star",tex:"\\star"},{asciimath:"|><|",tex:"\\bowtie"},{asciimath:"circ",tex:"\\circ"},{asciimath:"oint",tex:"\\oint\\limits"},{asciimath:"grad",tex:"\\nabla"},{asciimath:"quad",tex:"\\quad"},{asciimath:"uarr",tex:"\\uparrow"},{asciimath:"darr",tex:"\\downarrow"},{asciimath:"downarrow",tex:"\\downarrow"},{asciimath:"rarr",tex:"\\rightarrow"},{asciimath:">->>",tex:"\\twoheadrightarrowtail"},{asciimath:"larr",tex:"\\leftarrow"},{asciimath:"harr",tex:"\\leftrightarrow"},{asciimath:"rArr",tex:"\\Rightarrow"},{asciimath:"lArr",tex:"\\Leftarrow"},{asciimath:"hArr",tex:"\\Leftrightarrow"},{asciimath:"ast",tex:"\\ast"},{asciimath:"***",tex:"\\star"},{asciimath:"|><",tex:"\\ltimes"},{asciimath:"><|",tex:"\\rtimes"},{asciimath:"^^^",tex:"\\bigwedge"},{asciimath:"vvv",tex:"\\bigvee"},{asciimath:"cap",tex:"\\cap"},{asciimath:"nnn",tex:"\\bigcap\\limits"},{asciimath:"cup",tex:"\\cup"},{asciimath:"uuu",tex:"\\bigcup\\limits"},{asciimath:"not",tex:"\\neg"},{asciimath:"<=>",tex:"\\Leftrightarrow"},{asciimath:"_|_",tex:"\\bot"},{asciimath:"bot",tex:"\\bot"},{asciimath:"int",tex:"\\int\\limits"},{asciimath:"del",tex:"\\partial"},{asciimath:"...",tex:"\\ldots"},{asciimath:"/_\\",tex:"\\triangle"},{asciimath:"|__",tex:"\\lfloor"},{asciimath:"__|",tex:"\\rfloor"},{asciimath:"dim",tex:"\\dim"},{asciimath:"mod",tex:"\\operatorname{mod}"},{asciimath:"lub",tex:"\\operatorname{lub}"},{asciimath:"glb",tex:"\\operatorname{glb}"},{asciimath:">->",tex:"\\rightarrowtail"},{asciimath:"->>",tex:"\\twoheadrightarrow"},{asciimath:"|->",tex:"\\mapsto"},{asciimath:"lim",tex:"\\lim\\limits"},{asciimath:"Lim",tex:"\\operatorname{Lim}"},{asciimath:"and",tex:"\\quad\\text{and}\\quad"},{asciimath:"**",tex:"\\ast"},{asciimath:"//",tex:"/"},{asciimath:"\\",tex:"\\,"},{asciimath:"\\\\",tex:"\\backslash"},{asciimath:"xx",tex:"\\times"},{asciimath:"-:",tex:"\\div"},{asciimath:"o+",tex:"\\oplus"},{asciimath:"ox",tex:"\\otimes"},{asciimath:"o.",tex:"\\odot"},{asciimath:"^",tex:"\\hat{}"},{asciimath:"_",tex:"\\_"},{asciimath:"^^",tex:"\\wedge"},{asciimath:"vv",tex:"\\vee"},{asciimath:"nn",tex:"\\cap"},{asciimath:"uu",tex:"\\cup"},{asciimath:"TT",tex:"\\top"},{asciimath:"+-",tex:"\\pm"},{asciimath:"O/",tex:"\\emptyset"},{asciimath:"oo",tex:"\\infty"},{asciimath:":.",tex:"\\therefore"},{asciimath:":'",tex:"\\because"},{asciimath:"/_",tex:"\\angle"},{asciimath:"|~",tex:"\\lceil"},{asciimath:"~|",tex:"\\rceil"},{asciimath:"CC",tex:"\\mathbb{C}"},{asciimath:"NN",tex:"\\mathbb{N}"},{asciimath:"QQ",tex:"\\mathbb{Q}"},{asciimath:"RR",tex:"\\mathbb{R}"},{asciimath:"ZZ",tex:"\\mathbb{Z}"},{asciimath:"->",tex:"\\to"},{asciimath:"or",tex:"\\quad\\text{or}\\quad"},{asciimath:"if",tex:"\\quad\\text{if}\\quad"},{asciimath:"iff",tex:"\\iff"},{asciimath:"*",tex:"\\cdot"},{asciimath:"@",tex:"\\circ"},{asciimath:"%",tex:"\\%"},{asciimath:"boxempty",tex:"\\square"},{asciimath:"lambda",tex:"\\lambda"},{asciimath:"Lambda",tex:"\\Lambda"},{asciimath:"nabla",tex:"\\nabla"},{asciimath:"uparrow",tex:"\\uparrow"},{asciimath:"downarrow",tex:"\\downarrow"},{asciimath:"twoheadrightarrowtail",tex:"\\twoheadrightarrowtail"},{asciimath:"ltimes",tex:"\\ltimes"},{asciimath:"rtimes",tex:"\\rtimes"},{asciimath:"neg",tex:"\\neg"},{asciimath:"partial",tex:"\\partial"},{asciimath:"ldots",tex:"\\ldots"},{asciimath:"triangle",tex:"\\triangle"},{asciimath:"lfloor",tex:"\\lfloor"},{asciimath:"rfloor",tex:"\\rfloor"},{asciimath:"rightarrowtail",tex:"\\rightarrowtail"},{asciimath:"twoheadrightarrow",tex:"\\twoheadrightarrow"},{asciimath:"mapsto",tex:"\\mapsto"},{asciimath:"times",tex:"\\times"},{asciimath:"div",tex:"\\div"},{asciimath:"divide",tex:"\\div"},{asciimath:"oplus",tex:"\\oplus"},{asciimath:"otimes",tex:"\\otimes"},{asciimath:"odot",tex:"\\odot"},{asciimath:"wedge",tex:"\\wedge"},{asciimath:"vee",tex:"\\vee"},{asciimath:"top",tex:"\\top"},{asciimath:"pm",tex:"\\pm"},{asciimath:"emptyset",tex:"\\emptyset"},{asciimath:"infty",tex:"\\infty"},{asciimath:"therefore",tex:"\\therefore"},{asciimath:"because",tex:"\\because"},{asciimath:"lceil",tex:"\\lceil"},{asciimath:"rceil",tex:"\\rceil"},{asciimath:"to",tex:"\\to"},{asciimath:"langle",tex:"\\langle"},{asciimath:"lceiling",tex:"\\lceil"},{asciimath:"rceiling",tex:"\\rceil"},{asciimath:"max",tex:"\\max\\limits"},{asciimath:"min",tex:"\\min\\limits"},{asciimath:"prod",tex:"\\prod\\limits"},{asciimath:"sum",tex:"\\sum\\limits"}],this.constants=this.constants.concat(this.relations),this.left_brackets=[{asciimath:"langle",tex:"\\langle"},{asciimath:"(:",tex:"\\langle"},{asciimath:"<<",tex:"\\langle"},{asciimath:"{:",tex:"."},{asciimath:"(",tex:"("},{asciimath:"[",tex:"["},{asciimath:"{",tex:"\\lbrace"},{asciimath:"lbrace",tex:"\\lbrace"}],this.right_brackets=[{asciimath:"rangle",tex:"\\rangle"},{asciimath:":)",tex:"\\rangle"},{asciimath:">>",tex:"\\rangle"},{asciimath:":}",tex:".",free_tex:":\\}"},{asciimath:")",tex:")"},{asciimath:"]",tex:"]"},{asciimath:"}",tex:"\\rbrace"},{asciimath:"rbrace",tex:"\\rbrace"}],this.leftright_brackets=[{asciimath:"|",left_tex:"\\lvert",right_tex:"\\rvert",free_tex:"|"}],this.unary_symbols=[{asciimath:"sqrt",tex:"\\sqrt"},{asciimath:"f",tex:"f",func:!0},{asciimath:"g",tex:"g",func:!0},{asciimath:"sin",tex:"\\sin",func:!0},{asciimath:"cos",tex:"\\cos",func:!0},{asciimath:"tan",tex:"\\tan",func:!0},{asciimath:"arcsin",tex:"\\arcsin",func:!0},{asciimath:"arccos",tex:"\\arccos",func:!0},{asciimath:"arctan",tex:"\\arctan",func:!0},{asciimath:"sinh",tex:"\\sinh",func:!0},{asciimath:"cosh",tex:"\\cosh",func:!0},{asciimath:"tanh",tex:"\\tanh",func:!0},{asciimath:"cot",tex:"\\cot",func:!0},{asciimath:"coth",tex:"\\coth",func:!0},{asciimath:"sech",tex:"\\operatorname{sech}",func:!0},{asciimath:"csch",tex:"\\operatorname{csch}",func:!0},{asciimath:"sec",tex:"\\sec",func:!0},{asciimath:"csc",tex:"\\csc",func:!0},{asciimath:"log",tex:"\\log",func:!0},{asciimath:"ln",tex:"\\ln",func:!0},{asciimath:"abs",rewriteleftright:["|","|"]},{asciimath:"norm",rewriteleftright:["\\|","\\|"]},{asciimath:"floor",rewriteleftright:["\\lfloor","\\rfloor"]},{asciimath:"ceil",rewriteleftright:["\\lceil","\\rceil"]},{asciimath:"Sin",tex:"\\Sin",func:!0},{asciimath:"Cos",tex:"\\Cos",func:!0},{asciimath:"Tan",tex:"\\Tan",func:!0},{asciimath:"Arcsin",tex:"\\Arcsin",func:!0},{asciimath:"Arccos",tex:"\\Arccos",func:!0},{asciimath:"Arctan",tex:"\\Arctan",func:!0},{asciimath:"Sinh",tex:"\\Sinh",func:!0},{asciimath:"Cosh",tex:"\\Cosh",func:!0},{asciimath:"Tanh",tex:"\\Tanh",func:!0},{asciimath:"Cot",tex:"\\Cot",func:!0},{asciimath:"Sec",tex:"\\Sec",func:!0},{asciimath:"Csc",tex:"\\Csc",func:!0},{asciimath:"Log",tex:"\\Log",func:!0},{asciimath:"Ln",tex:"\\Ln",func:!0},{asciimath:"Abs",tex:"\\Abs",rewriteleftright:["|","|"]},{asciimath:"det",tex:"\\det",func:!0},{asciimath:"exp",tex:"\\exp",func:!0},{asciimath:"gcd",tex:"\\gcd",func:!0},{asciimath:"lcm",tex:"\\operatorname{lcm}",func:!0},{asciimath:"cancel",tex:"\\cancel"},{asciimath:"Sqrt",tex:"\\Sqrt"},{asciimath:"hat",tex:"\\hat",acc:!0},{asciimath:"bar",tex:"\\overline",acc:!0},{asciimath:"overline",tex:"\\overline",acc:!0},{asciimath:"vec",tex:"\\vec",acc:!0},{asciimath:"tilde",tex:"\\tilde",acc:!0},{asciimath:"dot",tex:"\\dot",acc:!0},{asciimath:"ddot",tex:"\\ddot",acc:!0},{asciimath:"ul",tex:"\\underline",acc:!0},{asciimath:"underline",tex:"\\underline",acc:!0},{asciimath:"ubrace",tex:"\\underbrace",acc:!0},{asciimath:"underbrace",tex:"\\underbrace",acc:!0},{asciimath:"obrace",tex:"\\overbrace",acc:!0},{asciimath:"overbrace",tex:"\\overbrace",acc:!0},{asciimath:"bb",atname:"mathvariant",atval:"bold",tex:"\\mathbf"},{asciimath:"mathbf",atname:"mathvariant",atval:"bold",tex:"mathbf"},{asciimath:"sf",atname:"mathvariant",atval:"sans-serif",tex:"\\mathsf"},{asciimath:"mathsf",atname:"mathvariant",atval:"sans-serif",tex:"mathsf"},{asciimath:"bbb",atname:"mathvariant",atval:"double-struck",tex:"\\mathbb"},{asciimath:"mathbb",atname:"mathvariant",atval:"double-struck",tex:"\\mathbb"},{asciimath:"cc",atname:"mathvariant",atval:"script",tex:"\\mathcal"},{asciimath:"mathcal",atname:"mathvariant",atval:"script",tex:"\\mathcal"},{asciimath:"tt",atname:"mathvariant",atval:"monospace",tex:"\\mathtt"},{asciimath:"mathtt",atname:"mathvariant",atval:"monospace",tex:"\\mathtt"},{asciimath:"fr",atname:"mathvariant",atval:"fraktur",tex:"\\mathfrak"},{asciimath:"mathfrak",atname:"mathvariant",atval:"fraktur",tex:"\\mathfrak"}],this.binary_symbols=[{asciimath:"root",tex:"\\sqrt",option:!0},{asciimath:"frac",tex:"\\frac"},{asciimath:"stackrel",tex:"\\stackrel"},{asciimath:"overset",tex:"\\overset"},{asciimath:"underset",tex:"\\underset"},{asciimath:"color",tex:"\\color",rawfirst:!0}],this.non_constant_symbols=["_","^","/"]}sort_symbols(){const t=(t,e)=>(t=t.asciimath.length)>(e=e.asciimath.length)?-1:t<e?1:0;this.constants.sort(t),this.relations.sort(t),this.left_brackets.sort(t),this.right_brackets.sort(t),this.leftright_brackets.sort(t),this.unary_symbols.sort(t),this.binary_symbols.sort(t)}error(t,e){const i=this.source(e).slice(0,5);throw new Error(`Error at character ${e} near "${i}": ${t}`)}literal(t){if(t)return{tex:t.token,pos:t.pos,end:t.end,ttype:"literal"}}longest(t){return(t=t.filter(t=>!!t)).sort((t,e)=>(t=t.end)>(e=e.end)?-1:t<e?1:0),t[0]}escape_text(t){return t.replace(/\{/g,"\\{").replace(/\}/g,"\\}")}input(t){this._source=t,this.brackets=[]}source(t=0,e){return arguments.length>1?this._source.slice(t,e):this._source.slice(t)}eof(t=0){return(t=this.strip_space(t))==this._source.length}unbracket(t){if(!t)return;if(!t.bracket)return t;const e=["(",")","[","]","{","}"],i=e.includes(t.left.asciimath),a=e.includes(t.right.asciimath),n=i?t.left.end:t.pos,s=a?t.right.pos:t.end;let r=i?"":t.left.tex,c=a?"":t.right.tex;const o=t.middle?t.middle.tex:"";return r||c?(r=r||".",c=c||".",{tex:`\\left ${r} ${o} \\right ${c}`,pos:t.pos,end:t.end}):{tex:o,pos:t.pos,end:t.end,middle_asciimath:this.source(n,s)}}parse(t){this.input(t);return this.consume().tex}consume(t=0){let e="";const i=[];for(;!this.eof(t);){let a=this.expression_list(t);if(!a){const e=this.right_bracket(t);e&&(e.def.free_tex&&(e.tex=e.def.free_tex),a=e);const i=this.leftright_bracket(t);if(i){a=i;const e=this.subsup(i.end);e&&(a={tex:`${a.tex}${e.tex}`,pos:t,end:e.end,ttype:"expression"})}}if(a)e&&(e+=" "),e+=a.tex,t=a.end,i.push(a);else if(!this.eof(t)){const a=this.source(t,t+1);i.push({tex:a,pos:t,ttype:"character"}),e+=a,t+=1}}return{tex:e,exprs:i}}strip_space(t=0){const e=this.source(t),i=e.replace(/^(\s|\\(?!\\))*/,"");return t+e.length-i.length}match(t,e){e=this.strip_space(e);const i=t.exec(this.source(e));if(i){const t=i[0];return{token:t,pos:e,match:i,end:e+t.length,ttype:"regex"}}}exact(t,e){if(e=this.strip_space(e),this.source(e).slice(0,t.length)==t)return{token:t,pos:e,end:e+t.length,ttype:"exact"}}expression_list(t=0){let e=this.expression(t);if(!e)return;let i=e.end,a=e.tex,n=[e];for(;!this.eof(i);){const t=this.exact(",",i);if(!t)break;if(a+=" ,",i=t.end,e=this.expression(i),!e)break;a+=" "+e.tex,n.push(e),i=e.end}return{tex:a,pos:t,end:i,exprs:n,ttype:"expression_list"}}expression(t=0){const e=this.negative_expression(t);if(e)return e;const i=this.intermediate_or_fraction(t);if(!i){for(let e of this.non_constant_symbols){const i=this.exact(e,t);if(i)return{tex:e,pos:t,end:i.end,ttype:"constant"}}return}if(this.eof(i.end))return i;const a=this.expression(i.end);return a?{tex:i.tex+" "+a.tex,pos:i.pos,end:a.end,ttype:"expression",exprs:[i,a]}:i}negative_expression(t=0){const e=this.exact("-",t);if(e&&!this.other_constant(t)){const i=this.expression(e.end);return i?{tex:"- "+i.tex,pos:t,end:i.end,ttype:"negative_expression",dash:e,expression:i}:{tex:"-",pos:t,end:e.end,ttype:"constant"}}}intermediate_or_fraction(t=0){const e=this.intermediate(t);if(!e)return;let i=this.match(/^\/(?!\/)/,e.end);if(i){const t=this.intermediate(i.end);if(t){const i=this.unbracket(e),a=this.unbracket(t);return{tex:`\\frac{${i.tex}}{${a.tex}}`,pos:e.pos,end:t.end,ttype:"fraction",numerator:i,denominator:a}}{const t=this.unbracket(e);return{tex:`\\frac{${t.tex}}{}`,pos:e.pos,end:i.end,ttype:"fraction",numerator:t,denominator:null}}}return e}intermediate(t=0){const e=this.simple(t);if(!e)return;const i=this.subsup(e.end);return i?{tex:`${e.tex}${i.tex}`,pos:t,end:i.end,ttype:"intermediate",expression:e,subsup:i}:e}subsup(t=0){let e,i,a="",n=t,s=this.exact("_",t);s&&(e=this.unbracket(this.simple(s.end)),e?(a=`${a}_{${e.tex}}`,n=e.end):(a+="_{}",n=s.end));let r=this.match(/^\^(?!\^)/,n);if(r&&(i=this.unbracket(this.simple(r.end)),i?(a=`${a}^{${i.tex}}`,n=i.end):(a+="^{}",n=r.end)),s||r)return{tex:a,pos:t,end:n,ttype:"subsup",sub:e,sup:i}}simple(t=0){return this.longest([this.matrix(t),this.bracketed_expression(t),this.binary(t),this.constant(t),this.text(t),this.unary(t),this.negative_simple(t)])}negative_simple(t=0){const e=this.exact("-",t);if(e&&!this.other_constant(t)){const i=this.simple(e.end);return i?{tex:"- "+i.tex,pos:t,end:i.end,ttype:"negative_simple",dash:e,expr:i}:{tex:"-",pos:t,end:e.end,ttype:"constant"}}}matrix(t=0){let e=this.left_bracket(t),i=!1;if(!e){if(e=this.leftright_bracket(t,"left"),!e)return;i=!0}const a=this.matrix_contents(e.end,i);if(!a)return;const n=i?this.leftright_bracket(a.end,"right"):this.right_bracket(a.end);if(!n)return;const s=a.rows.map(t=>t.tex).join(" \\\\ "),r=a.is_array?`\\begin{array}{${a.column_desc}} ${s} \\end{array}`:`\\begin{matrix} ${s} \\end{matrix}`;return{tex:`\\left ${e.tex} ${r} \\right ${n.tex}`,pos:t,end:n.end,ttype:"matrix",rows:a.rows,left:e,right:n}}matrix_contents(t=0,e=!1){let i=[],a=t,n=void 0,s=void 0,r=!1;for(;!this.eof(a)&&!(e?this.leftright_bracket(a):this.right_bracket(a));){if(i.length){const t=this.exact(",",a);if(!t)return;a=t.end}const t=this.match(/^[(\[]/,a);if(!t)return;const e=[],c=[];for(a=t.end;!this.eof(a);){if(e.length){const t=this.exact(",",a);if(!t)break;a=t.end}const t=this.matrix_cell(a);if(!t)break;"column"==t.ttype?(c.push("|"),r=!0,null!==t.expr&&(c.push("r"),e.push(t.expr))):(c.push("r"),e.push(t)),a=t.end}if(!e.length)return;if(void 0===n)n=e.length;else if(e.length!=n)return;const o=this.match(/^[)\]]/,a);if(!o)return;const h=c.join("");if(void 0===s)s=h;else if(h!=s)return;i.push({ttype:"row",tex:e.map(t=>t.tex).join(" & "),pos:t.end,end:a,cells:e}),a=o.end}if(!(void 0===n||n<=1&&i.length<=1))return{rows:i,end:a,column_desc:s,is_array:r}}matrix_cell(t=0){const e=this.exact("|",t);if(e){const t=this.expression(e.end);if(!t)return{ttype:"column",expr:null,pos:e.pos,end:e.end};{const i=this.exact("|",t.end);if(!i)return{ttype:"column",expr:t,pos:e.pos,end:t.end};{const a=this.expression(i.end);if(a)return{tex:`\\left \\lvert ${t.tex} \\right \\rvert ${a.text}`,pos:e.pos,end:a.end,ttype:"expression",exprs:[t,a]}}}}return this.expression(t)}bracketed_expression(t=0){const e=this.left_bracket(t);if(e){const i=this.expression_list(e.end);if(i){const a=this.right_bracket(i.end)||this.leftright_bracket(i.end,"right");return a?{tex:`\\left${e.tex} ${i.tex} \\right ${a.tex}`,pos:t,end:a.end,bracket:!0,left:e,right:a,middle:i,ttype:"bracket"}:this.eof(i.end)?{tex:`\\left${e.tex} ${i.tex} \\right.`,pos:t,end:i.end,ttype:"bracket",left:e,right:null,middle:i}:{tex:`${e.tex} ${i.tex}`,pos:t,end:i.end,ttype:"expression",exprs:[e,i]}}{const i=this.right_bracket(e.end)||this.leftright_bracket(e.end,"right");return i?{tex:`\\left ${e.tex} \\right ${i.tex}`,pos:t,end:i.end,bracket:!0,left:e,right:i,middle:null,ttype:"bracket"}:{tex:e.tex,pos:t,end:e.end,ttype:"constant"}}}if(this.other_constant(t))return;const i=this.leftright_bracket(t,"left");if(i){const e=this.expression_list(i.end);if(e){const a=this.leftright_bracket(e.end,"right")||this.right_bracket(e.end);if(a)return{tex:`\\left ${i.tex} ${e.tex} \\right ${a.tex}`,pos:t,end:a.end,bracket:!0,left:i,right:a,middle:e,ttype:"bracket"}}}}right_bracket(t=0){for(let e of this.right_brackets){const i=this.exact(e.asciimath,t);if(i)return{tex:e.tex,pos:t,end:i.end,asciimath:e.asciimath,def:e,ttype:"right_bracket"}}}left_bracket(t=0){for(let e of this.left_brackets){const i=this.exact(e.asciimath,t);if(i)return{tex:e.tex,pos:t,end:i.end,asciimath:e.asciimath,ttype:"left_bracket"}}}leftright_bracket(t=0,e){for(let i of this.leftright_brackets){const a=this.exact(i.asciimath,t);if(a)return{tex:"left"==e?i.left_tex:"right"==e?i.right_tex:i.free_tex,pos:t,end:a.end,ttype:"leftright_bracket"}}}text(t=0){const e=this.match(/^"([^"]*)"/,t);if(e){const i=this.escape_text(e.match[1]);return{tex:`\\text{${i}}`,pos:t,end:e.end,ttype:"text",text:i}}const i=this.match(/^(?:mbox|text)\s*(\([^)]*\)?|\{[^}]*\}?|\[[^\]]*\]?)/,t);if(i){const e=this.escape_text(i.match[1].slice(1,i.match[1].length-1));return{tex:`\\text{${e}}`,pos:t,end:i.end,ttype:"text",text:e}}}binary(t=0){for(let e of this.binary_symbols){const i=this.exact(e.asciimath,t),[a,n]=e.option?["[","]"]:["{","}"];if(i){const s=this.unbracket(this.simple(i.end));if(s){const i=e.rawfirst?s.middle_asciimath:s.tex,r=this.unbracket(this.simple(s.end));return r?{tex:`${e.tex}${a}${i}${n}{${r.tex}}`,pos:t,end:r.end,ttype:"binary",op:e,arg1:s,arg2:r}:{tex:`${e.tex}${a}${i}${n}{}`,pos:t,end:s.end,ttype:"binary",op:e,arg1:s,arg2:null}}return{tex:`${e.tex}${a}${n}{}`,pos:t,end:i.end,ttype:"binary",op:e,arg1:null,arg2:null}}}}unary(t=0){for(let e of this.unary_symbols){const i=this.exact(e.asciimath,t);if(i){const a=this.subsup(i.end),n=a?a.tex:"",s=a?a.end:i.end,r=this.simple(s),c=e.func?r:this.unbracket(r),o=c&&(e.raw?c.middle_asciimath:c.tex);if(e.rewriteleftright){const[s,r]=e.rewriteleftright;return c?{tex:`\\left ${s} ${o} \\right ${r} ${n}`,pos:t,end:c.end,ttype:"unary",op:i,subsup:a,arg:c}:{tex:`\\left ${s} \\right ${r} ${n}`,pos:t,end:i.end,ttype:"unary",op:i,subsup:a,arg:null}}return c?{tex:`${e.tex}${n}{${o}}`,pos:t,end:c.end,ttype:"unary",op:i,subsup:a,arg:c}:{tex:`${e.tex}${n}{}`,pos:t,end:i.end,ttype:"unary",op:i,subsup:a,arg:null}}}}constant(t=0){if(!this.right_bracket(t))return this.longest([this.other_constant(t),this.greek(t),this.name(t),this.number(t),this.arbitrary_constant(t)])}name(t=0){return this.literal(this.match(/^[A-Za-z]/,t))}greek(t=0){const e=new RegExp("^("+this.greek_letters.join("|")+")"),i=this.match(e,t);if(i)return{tex:"\\"+i.token,pos:t,end:i.end,ttype:"greek"}}number(t=0){const e=new RegExp("^\\d+("+this.decimalsign+"\\d+)?");return this.literal(this.match(e,t))}other_constant(t=0){for(let e of this.constants){let i=this.exact(e.asciimath,t);if(i)return{tex:""+e.tex,pos:i.pos,end:i.end,ttype:"other_constant"}}for(let e of this.relations)if(!e.asciimath.match(/^!/)){let i=this.exact("!"+e.asciimath,t);if(i)return{tex:"\\not "+e.tex,pos:i.pos,end:i.end,ttype:"other_constant"}}}arbitrary_constant(t=0){if(!this.eof(t)){if(this.exact(",",t))return;for(let e of this.non_constant_symbols.concat(this.left_brackets.map(t=>t.asciimath),this.right_brackets.map(t=>t.asciimath),this.leftright_brackets.map(t=>t.asciimath)))if(this.exact(e,t))return;const e=this.strip_space(t);return{tex:this.source(e).slice(0,1),pos:t,end:e+1,ttype:"arbitrary_constant"}}}}var s=i(0),r=function(){function t(){this.translate=new n,this.renderer=new o}return t.prototype.render=function(t,e){this.renderer.render(this.translate.parse(t),e)},t}(),c=function(){function t(){}return t.prototype.render=function(t,e){var i=document.createElement("pre");i.classList.add("plaintext-render"),i.innerText=t,e.innerHTML="",e.append(i)},t}(),o=function(){function t(){}return t.prototype.render=function(t,e){s.render(t,e,{output:"html",throwOnError:!1})},t}(),h={katex:new o,plain:new c,asciimath:new r},l=function(t){this.text=t};function m(t){setTimeout((function(){t.style.cssText="height:auto;",t.style.cssText="height: "+t.scrollHeight+"px"}),0)}var u=function(){function t(t,e){var i=this;for(var a in this.onchange=new Array,this.elem=document.createElement("textarea"),this.elem.addEventListener("input",(function(t){i.onchange.forEach((function(t){return t.call(i,new l(i.elem.value))})),m(i.elem)})),this.typeElement=document.createElement("select"),h)this.typeElement.add(new Option(a,a));this.typeElement.addEventListener("change",(function(t){e(i.type)})),this.rootElem=document.createElement("article"),this.rootElem.append(this.typeElement,this.elem),t.appendChild(this.rootElem)}return Object.defineProperty(t.prototype,"value",{get:function(){return this.elem.value},set:function(t){this.elem.value=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"visible",{set:function(t){this.rootElem.style.display=t?"":"none",t&&(this.elem.focus({preventScroll:!0}),m(this.elem))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"type",{get:function(){return this.typeElement.options[this.typeElement.selectedIndex].text},set:function(t){for(var e=this.typeElement.options,i=void 0,a=0;i=e[a];a++)if(i.value==t)return void(this.typeElement.options.selectedIndex=a);alert("Неизвестный тип рендера "+t+". Попробуйте перезагрузить страницу.")},enumerable:!1,configurable:!0}),t.prototype.addEventListener=function(t,e){switch(t){case"change":return this.onchange.push(e)-1;default:throw t+" cannot listen for InputField"}},t}(),d=function(){function t(t,e){var i=this;void 0===e&&(e=new o),this.changed=!1,this._value="",this._renderer=e,t.appendChild(this.outputContainer=document.createElement("article")),this.outputContainer.classList.add("output-container"),setInterval((function(){i.changed&&(i.changed=!1,i.render())}),25)}return Object.defineProperty(t.prototype,"value",{set:function(t){this._value!==t&&(this._value=t,this.changed=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"engine",{set:function(t){this._renderer!==t&&(this.changed=!0,this._renderer=t)},enumerable:!1,configurable:!0}),t.prototype.render=function(){this._renderer.render(this._value,this.outputContainer)},t}(),x=function(t,e){this.value=t,this.type=e},p=function(){function t(t,e){var i=this;this.input=new u(t,(function(t){i.out.engine=h[t],e()})),this.out=new d(t),this.input.addEventListener("change",(function(t){i.out.value=t.text,e()}))}return Object.defineProperty(t.prototype,"editable",{set:function(t){this.input.visible=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"type",{get:function(){return this.input.type},set:function(t){this.out.engine=h[t],this.input.type=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"value",{set:function(t){this.input.value=this.out.value=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"data",{get:function(){return new x(this.input.value,this.input.type)},set:function(t){t.type&&(this.type=t.type),"string"==typeof t.value&&(this.value=t.value)},enumerable:!1,configurable:!0}),t}(),f={Edit:b('<path d="M30 7 L25 2 5 22 3 29 10 27 Z M21 6 L26 11 Z M5 22 L10 27 Z" />',"i-edit"),Language:b('<path d="M10 9 L3 17 10 25 M22 9 L29 17 22 25 M18 7 L14 27" />',"i-code"),Delete:b('<path d="M28 6 L6 6 8 30 24 30 26 6 4 6 M16 12 L16 24 M21 12 L20 24 M11 12 L12 24 M12 6 L13 2 19 2 20 6" />',"i-trash"),Add:b('<path d="M16 2 L16 30 M2 16 L30 16" />',"i-plus")};function b(t,e,i){return void 0===i&&(i=24),'<svg id="'+e+'" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="'+i+'" height="'+i+'" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1">'+t+"</svg>"}var g=function(){function t(t,e,i){this.button=document.createElement("button"),this.button.innerHTML=e,this.button.addEventListener("click",(function(t){i(),t.preventDefault()})),t.append(this.button)}return Object.defineProperty(t.prototype,"visible",{set:function(t){this.button.style.display=t?"":"none"},enumerable:!1,configurable:!0}),t.prototype.click=function(){this.button.click()},t}(),y=function(){function t(t,e,i,a){var n=this;this.editable=e,this.editState=!0;var s=document.createElement("article");s.classList.add("line-controls"),new g(s,f.Edit,(function(){n.edit=!n.editState})),this.delButton=new g(s,f.Delete,i),this.addButton=new g(s,f.Add,a),t.append(s)}return Object.defineProperty(t.prototype,"edit",{set:function(t){t!==this.editState&&(this.addButton.visible=this.delButton.visible=this.editState=this.editable(t))},enumerable:!1,configurable:!0}),t.prototype.clickDel=function(){this.delButton.click()},t.prototype.clickAdd=function(){this.addButton.click()},t}(),v=function(){function t(t,e,i,a){var n=this;this.section=document.createElement("section");var s=document.createElement("article");s.addEventListener("focusin",(function(t){s.classList.add("focus"),i.focusOnLine(!0)})),s.addEventListener("focusout",(function(t){i.focusOnLine(!1),s.classList.remove("focus")})),s.tabIndex=-1,s.classList.add("line");var r=document.createElement("header");this.controls=new y(r,(function(t){var e=n.line.editable=t;return localStorage.setItem(a,JSON.stringify(e)),e}),i.delete,(function(){i.appendLine(n.line.type),n.edit=!1}));var c=document.createElement("section");this.line=new p(c,i.changedLine),s.append(r,c),this.section.append(s),t.append(this.section),this.order=e,this.edit=JSON.parse(localStorage.getItem(a)||"false")}return Object.defineProperty(t.prototype,"order",{get:function(){return Number.parseInt(this.section.style.order)},set:function(t){var e=this;if(this.section.style.order!==t.toString()){var i=Math.max(1,t);["button","input","select","textarea"].forEach((function(t){return e.section.querySelectorAll(t).forEach((function(t){t.tabIndex=i}))})),this.section.style.order=t.toString()}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"edit",{set:function(t){this.controls.edit=t},enumerable:!1,configurable:!0}),t.prototype.scroll=function(){this.section.scrollIntoView({block:"center",behavior:"smooth"})},t.prototype.delete=function(){this.section.remove()},t.prototype.append=function(){this.controls.clickAdd()},t}(),_=function(t,e,i){this.id=t,this.value=e,this.number=i},w=function(){function t(t){this.boardId=t}return t.prototype.keyForLine=function(t){return[this.boardId,t].join("/")},t}(),k=function(){function t(t,e,i){var a=this;this.actionsHandler=e,this.keyGenerator=i,this.lines=new Map,this.modified=new Set,this.lastLine="",this.root=document.createElement("article"),this.root.classList.add("board"),t.appendChild(this.root),t.addEventListener("keydown",(function(t){t.ctrlKey&&"Enter"===t.key&&a.activeOrLastLine().then((function(t){t.id;return t.line.append()}))}))}return t.prototype.changes=function(){var t=this,e=new Array;return this.modified.forEach((function(i){var a=t.lines.get(i);a&&e.push(new _(i,a.line.data))})),this.modified.clear(),e},t.prototype.update=function(t){var e=this,i=t.id,n=t.number,s=t.value,r=this.lines.get(i);if(!r){if(-1===n)return;r=this.addLine(i,n)}if(n){if(-1===n)return r.delete(),this.lines.delete(i),void(this.lastLine===i&&this.findLastLine());a(this.lines.get(this.lastLine)).then((function(t){t.order<n&&(e.lastLine=i)})).catch((function(){return e.findLastLine()})),r.order=n}s&&(r.line.data=s)},t.prototype.toJSON=function(){var t=new Array;return this.lines.forEach((function(e){t.push(e)})),t.sort((function(t,e){return t.order-e.order})).map((function(t){return t.line.data}))},t.prototype.addLineHandler=function(t,e){var i=this;this.actionsHandler.addLine(t,e).then((function(t){var e=i.lines.get(t);if(!e)throw"Trouble this new line "+t;e.scroll(),e.edit=!0})).catch((function(t){return alert(t)}))},t.prototype.activeOrLastLine=function(){var t=this;return a(this.activeLine).catch((function(e){return Promise.resolve(t.lastLine)})).then((function(e){return a(t.lines.get(e)).then((function(t){return Promise.resolve({id:e,line:t})}))}))},t.prototype.addLine=function(t,e){var i=this;void 0===e&&(e=Number.MAX_SAFE_INTEGER);var a=new v(this.root,e,{appendLine:function(e){i.addLineHandler(t,e)},changedLine:function(){i.modified.add(t)},focusOnLine:function(e){e?i.activeLine=t:t!==i.activeLine||(i.activeLine=void 0)},delete:function(){return i.actionsHandler.deleteLine(t)}},this.keyGenerator.keyForLine(t));return 0===this.lines.size&&(this.lastLine=t),this.lines.set(t,a),a},t.prototype.findLastLine=function(){var t=this,e=0;this.lines.forEach((function(i,a){i.order>e&&(e=i.order,t.lastLine=a)}))},t}(),L=(i(5),function(t,e,i,a){this.boardBackground=t,this.boardText=e,this.lineBackground=i,this.lineText=a});function E(t){var e=document.querySelector(":root");if(!e)throw"Can't change color theme: root element is null!";e.style.setProperty("--line-text-color",t.lineText),e.style.setProperty("--line-background-color",t.lineBackground),e.style.setProperty("--board-background-color",t.boardBackground),e.style.setProperty("--board-text-color",t.boardText),localStorage.setItem("color-theme",JSON.stringify(t))}var $=function(t,e){var i=document.createElement("div");i.addEventListener("click",(function(){return E(e)})),i.style.backgroundColor=e.boardBackground,i.style.color=e.boardText,i.textContent="Aa";var a=document.createElement("div");a.style.backgroundColor=e.lineBackground,a.style.color=e.lineText,a.textContent="Bb",i.append(a),t.append(i)},q=function(t,e){var i=localStorage.getItem("color-theme");E(i?JSON.parse(i):e[0]);var a=document.createElement("article");a.classList.add("color-themes-panel"),e.forEach((function(t){return new $(a,t)})),t.append(a)},O=[new L("#EEE","#000","#154336","#FFF"),new L("#2a2c33","#DAD7DD","#383a42","#DAD7DD"),new L("#33343D","#DAD7DD","#131416","#DAD7DD"),new L("#000","#EEE","#FFF","#000"),new L("#EEE","#000","#FFF","#000"),new L("#EEE","#000","#FFF","#00F")],S=Math.floor(214748.3647),P=function(){function t(t){this.parent=t,this.lines=new Array,this.keyGenerator=new w("demoboard"),this.board=new k(t,this,this.keyGenerator)}return t.prototype.loadBoard=function(t){var e=this;this.parent.removeChild(this.board.root),this.board=new k(this.parent,this,this.keyGenerator),t.forEach((function(t){return e.addLineAfter(t)}))},t.prototype.addLineAfter=function(t,e){var i=-1;if(0===this.lines.length)i=0,this.lines.push(i);else{var a=e||this.lines[this.lines.length-1];if(a===this.lines[this.lines.length-1])i=a+S,this.lines.push(i);else{var n=this.lines.findIndex((function(t){return t==e})),s=this.lines[n+1];if((i=a+Math.floor((s-a)/2))===a)throw"Недостаточно места между строками!";this.lines.splice(n+1,0,i)}}return this.board.update(new _(i,t,i)),i},t.prototype.addLine=function(t,e){return Promise.resolve(this.addLineAfter(new x("",e),t))},t.prototype.deleteLine=function(t){return this.lines.length>1?(this.lines.splice(this.lines.findIndex((function(e){return e==t})),1),this.board.update(new _(t,void 0,-1)),Promise.resolve(!0)):Promise.resolve(!1)},t}();var j=document.createElement("section");document.body.append(j);var A=new P(j);A.loadBoard(JSON.parse('[{"value":"f(x)=max(x, 2x^2)\\\\\\\\k=6","type":"katex"},{"value":"((x,0, 1, 2, 3, 4, 5),\\n(x^2,0, 1, 4, 3, 4, 1),\\n(f(x),0, 2, 2, 3, 4, 5))","type":"asciimath"},{"value":"((1, 1,|, 2),\\n(2, 4,|, 2)\\n,(3, 3,|, 3),\\n(? ,?, |,?),\\n(? ,?, |,?))=>((3, 3,|, 3))-3((1, 1,|, 2))=((0, 0,|, 3!=0))=>text(решений нет)","type":"asciimath"},{"value":"oxtext(Доказать, что полна только при простых k:){1+x_1-x_2+x_1*x_2*x_3,0}","type":"asciimath"}]'));var C=document.createElement("footer"),T=document.createElement("button");T.textContent="Получить json",T.addEventListener("click",(function(){var t=JSON.stringify(A.board,void 0,4),e=new Blob([t],{type:"application/json"}),i=document.createElement("a");i.download="board.json",i.href=URL.createObjectURL(e),document.body.appendChild(i),i.click(),document.body.removeChild(i)}));var M=document.createElement("input");M.type="file",M.textContent="Загрузить json",M.addEventListener("change",(function(){var t,e=null===(t=this.files)||void 0===t?void 0:t.item(0);e&&function(t){return new Promise((function(e,i){var a=new FileReader;a.addEventListener("load",(function(t){e(a.result)})),a.addEventListener("error",i),a.readAsText(t)}))}(e).then((function(t){return A.loadBoard(JSON.parse(t))})).catch((function(t){return alert("Не удалось загрузить "+e.name+": "+t)}))}));var D=document.body.getElementsByTagName("header")[0];C.append(T,M),D.append(C),new q(D,O);var B=document.createElement("a");B.href="https://github.com/RobolabGs2/onlineboard",B.text="Github",document.body.append(B)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,